"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.djangoVitePlugin = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const picocolors_1 = __importDefault(require("picocolors"));
const helpers_js_1 = require("./helpers.js");
const config_js_1 = require("./config.js");
let DJANGO_VERSION = '...';
const THIS_DIR = (0, helpers_js_1.getAbsolutePathFromMetaUrl)(typeof __dirname === 'undefined'
    ? // @ts-ignore
        path_1.default.dirname(new URL(import.meta.url).pathname)
    : __dirname);
async function djangoVitePlugin(config) {
    if (typeof config === 'string' || Array.isArray(config)) {
        config = { input: config };
    }
    process.stdout.write('Loading configurations...\r');
    const appConfig = await (0, helpers_js_1.execPythonJSON)(['--action', 'config'], config);
    if (DJANGO_VERSION === '...') {
        process.stdout.write('Loading django version...\r');
        (0, helpers_js_1.execPythonJSON)(['--action', 'version'], config).then((v) => (DJANGO_VERSION = `"${v}"`));
    }
    process.stdout.write('\r'.padStart(26, ' '));
    config = await (0, config_js_1.resolvePluginConfig)(config, appConfig);
    return [
        djangoPlugin(config),
        fullReload(config),
    ];
}
exports.djangoVitePlugin = djangoVitePlugin;
let exitHandlersBound = false;
function djangoPlugin(config) {
    const defaultAliases = (0, helpers_js_1.getAppAliases)(config.appConfig);
    if (config.addAliases) {
        (0, helpers_js_1.writeAliases)(config, defaultAliases);
    }
    let viteDevServerUrl;
    let userConfigG;
    return {
        name: 'django-vite-plugin',
        enforce: 'pre',
        config: (userConfig, { command }) => {
            var _a, _b, _c, _d;
            const build = (0, config_js_1.resolveBuildConfig)(config, userConfig.build);
            userConfigG = userConfig;
            return {
                ...userConfig,
                base: command == 'build' ? config.appConfig.BUILD_URL_PREFIX : '',
                root: userConfig.root || config.root || '.',
                build,
                resolve: {
                    alias: Array.isArray((_a = userConfig.resolve) === null || _a === void 0 ? void 0 : _a.alias)
                        ? [
                            ...((_c = (_b = userConfig.resolve) === null || _b === void 0 ? void 0 : _b.alias) !== null && _c !== void 0 ? _c : []),
                            ...Object.keys(defaultAliases).map((alias) => ({
                                find: alias,
                                replacement: defaultAliases[alias],
                            })),
                        ]
                        : {
                            ...defaultAliases,
                            ...(_d = userConfig.resolve) === null || _d === void 0 ? void 0 : _d.alias,
                        },
                },
            };
        },
        configureServer(server) {
            var _a;
            (_a = server.httpServer) === null || _a === void 0 ? void 0 : _a.once('listening', () => {
                var _a;
                const address = (_a = server.httpServer) === null || _a === void 0 ? void 0 : _a.address();
                const isAddressInfo = (x) => typeof x === 'object';
                if (isAddressInfo(address)) {
                    viteDevServerUrl = (0, helpers_js_1.resolveDevServerUrl)(address, server.config, userConfigG);
                    fs_1.default.writeFileSync(config.appConfig.HOT_FILE, viteDevServerUrl);
                    setTimeout(() => {
                        server.config.logger.info(`\n  ${picocolors_1.default.red(`${picocolors_1.default.bold('DJANGO')}`)} ${DJANGO_VERSION} ${picocolors_1.default.dim('plugin')} ${picocolors_1.default.bold(`"${(0, helpers_js_1.pluginVersion)()}"`)}`);
                        server.config.logger.info('');
                    }, 100);
                    if (!exitHandlersBound) {
                        const clean = () => {
                            if (fs_1.default.existsSync(config.appConfig.HOT_FILE)) {
                                fs_1.default.rmSync(config.appConfig.HOT_FILE);
                            }
                        };
                        process.on('exit', clean);
                        process.on('SIGINT', process.exit);
                        process.on('SIGTERM', process.exit);
                        process.on('SIGHUP', process.exit);
                        exitHandlersBound = true;
                    }
                }
            });
            return () => server.middlewares.use((req, res, next) => {
                if (req.url === '/index.html') {
                    res.statusCode = 404;
                    res.end(fs_1.default
                        .readFileSync(path_1.default.join(THIS_DIR, 'info.html'))
                        .toString());
                }
                next();
            });
        },
    };
}
function fullReload(config) {
    if (!config.reloader) {
        return {
            name: 'django-vite-plugin-reloader',
        };
    }
    let reloader = config.reloader;
    if (reloader === true) {
        reloader = (file) => /\.(html|py)$/.test(file);
    }
    return {
        name: 'django-vite-plugin-reloader',
        configureServer({ ws, watcher }) {
            watcher.on('change', (file) => {
                // @ts-ignore
                if (reloader(file)) {
                    setTimeout(() => ws.send({ type: 'full-reload', path: '*' }), config.delay);
                }
            });
            if (config.watch) {
                config.watch.forEach((file) => {
                    if (file.indexOf('__pycache__') >= 0) {
                        return;
                    }
                    watcher.add(file);
                });
            }
        },
    };
}
exports.default = djangoVitePlugin;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveBuildConfig = exports.resolvePluginConfig = void 0;
const fs_1 = __importDefault(require("fs"));
const glob_1 = require("glob");
const helpers_js_1 = require("./helpers.js");
async function resolvePluginConfig(config, appConfig) {
    if (!config) {
        throw new Error('django-vite-plugin: no configuration is provided!');
    }
    if (typeof config.input === 'undefined') {
        throw new Error('django-vite-plugin: no input is provided!');
    }
    const promises = [
        resolveFullReloadConfig(config, appConfig.INSTALLED_APPS),
    ];
    if (appConfig.STATIC_LOOKUP) {
        promises.push((0, helpers_js_1.addStaticToInputs)(config.input, config));
    }
    const res = await Promise.all(promises);
    if (appConfig.STATIC_LOOKUP) {
        config.input = res[1];
    }
    //@ts-expect-error no way to convert decleared types
    config.appConfig = appConfig;
    if (config.addAliases === true) {
        (0, helpers_js_1.createJsConfig)(config);
    }
    config.addAliases = config.addAliases !== false;
    return config;
}
exports.resolvePluginConfig = resolvePluginConfig;
function resolveBuildConfig(config, front) {
    var _a, _b, _c;
    return {
        ...(front || {}),
        manifest: (_a = front === null || front === void 0 ? void 0 : front.manifest) !== null && _a !== void 0 ? _a : true,
        outDir: (_b = front === null || front === void 0 ? void 0 : front.outDir) !== null && _b !== void 0 ? _b : config.appConfig.BUILD_DIR,
        assetsInlineLimit: (_c = front === null || front === void 0 ? void 0 : front.assetsInlineLimit) !== null && _c !== void 0 ? _c : 0,
        rollupOptions: {
            ...((front === null || front === void 0 ? void 0 : front.rollupOptions) || {}),
            input: config.input,
        },
    };
}
exports.resolveBuildConfig = resolveBuildConfig;
async function resolveFullReloadConfig(config, apps) {
    if (typeof config.reloader === 'undefined') {
        config.reloader = true;
    }
    else if (!config.reloader) {
        config.watch = [];
        return;
    }
    if (typeof config.delay !== 'number') {
        config.delay = 3000;
    }
    if (Array.isArray(config.watch)) {
        return;
    }
    const root = config.root || '.';
    const watch = [];
    for (const app in apps) {
        if (fs_1.default.existsSync(root + '/' + app)) {
            watch.push(`${root}/${app}/**/*.py`);
        }
    }
    config.watch = glob_1.glob.globSync(watch);
}

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveDevServerUrl = exports.getAppAliases = exports.createJsConfig = exports.writeAliases = exports.addStaticToInputs = exports.pluginVersion = exports.execPythonJSON = exports.execPythonNoErr = exports.getAbsolutePathFromMetaUrl = void 0;
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const vite_1 = require("vite");
const jsonc_parser_1 = require("jsonc-parser");
function getAbsolutePathFromMetaUrl(path) {
    if (process.platform === 'win32' && path.startsWith('/')) {
        return path.substring(1);
    }
    return path;
}
exports.getAbsolutePathFromMetaUrl = getAbsolutePathFromMetaUrl;
const BASE_DIR = path_1.default.dirname(getAbsolutePathFromMetaUrl(typeof __dirname === 'undefined'
    ? // @ts-ignore
        path_1.default.dirname(new URL(import.meta.url).pathname)
    : __dirname));
function execPythonNoErr(args, config) {
    return new Promise((resolve) => {
        args = [...(args || []), ...(config.pyArgs || [])];
        const py = (0, child_process_1.spawn)(config.pyPath || 'python', [
            path_1.default.join(config.root || '', 'manage.py'),
            'django_vite_plugin',
            ...args,
        ]);
        let err = '', res = '';
        py.stderr.on('data', (data) => {
            err += data.toString();
        });
        py.stdout.on('data', (data) => {
            res += data.toString();
        });
        py.on('close', () => {
            resolve([res, err]);
        });
    });
}
exports.execPythonNoErr = execPythonNoErr;
async function execPythonJSON(args, config) {
    const [res, err] = await execPythonNoErr(args, config);
    try {
        return JSON.parse(res);
    }
    catch (error) {
        if (err) {
            throw new Error(err);
        }
        else {
            throw error;
        }
    }
}
exports.execPythonJSON = execPythonJSON;
function pluginVersion() {
    var _a;
    try {
        return (_a = JSON.parse(fs_1.default.readFileSync(path_1.default.join(BASE_DIR, '/package.json')).toString())) === null || _a === void 0 ? void 0 : _a.version;
    }
    catch {
        return '';
    }
}
exports.pluginVersion = pluginVersion;
/**
 * Adds 'static' in file paths if already not exists
 */
async function addStaticToInputs(input, config) {
    if (typeof input === 'string') {
        input = [input];
    }
    return await execPythonJSON(['--find-static', ...input.map((f) => (0, vite_1.normalizePath)(f))], config);
}
exports.addStaticToInputs = addStaticToInputs;
const getJsOrTsConfigPath = (config, js = false) => {
    let root = process.cwd();
    if (config.root) {
        root = path_1.default.join(root, config.root);
    }
    const fileName = js ? 'jsconfig.json' : 'tsconfig.json';
    let cfgPath = path_1.default.join(root, fileName);
    if (!fs_1.default.existsSync(cfgPath)) {
        if (!config.root) {
            if (!js) {
                return getJsOrTsConfigPath(config, true);
            }
            return;
        }
        root = process.cwd();
        cfgPath = path_1.default.join(root, fileName);
        if (!fs_1.default.existsSync(cfgPath)) {
            if (!js) {
                return getJsOrTsConfigPath(config, true);
            }
            return;
        }
    }
    return { root, cfgPath };
};
async function writeAliases(config, aliases) {
    var _a;
    const cfgOpts = getJsOrTsConfigPath(config);
    if (!cfgOpts) {
        return;
    }
    const { root, cfgPath } = cfgOpts;
    const fileContent = fs_1.default.readFileSync(cfgPath, 'utf8');
    const jsonNode = (0, jsonc_parser_1.parse)(fileContent, [], { disallowComments: false });
    const old = ((_a = jsonNode.compilerOptions) === null || _a === void 0 ? void 0 : _a.paths) || {};
    const updatedPaths = {};
    for (const alias in old) {
        if (!alias.startsWith('@s:') && !alias.startsWith('@t:')) {
            updatedPaths[alias] = old[alias];
        }
    }
    for (let alias in aliases) {
        let val = (0, vite_1.normalizePath)(path_1.default.relative(root, aliases[alias]));
        if (val !== '.') {
            val = './' + val;
        }
        val += '/*';
        alias += '/*';
        updatedPaths[alias] = [val];
    }
    const edits = (0, jsonc_parser_1.modify)(fileContent, ['compilerOptions', 'paths'], updatedPaths, {
        formattingOptions: {
            tabSize: 2,
            insertSpaces: true,
            keepLines: true,
        },
    });
    const newContent = (0, jsonc_parser_1.applyEdits)(fileContent, edits);
    fs_1.default.writeFileSync(cfgPath, newContent, 'utf-8');
}
exports.writeAliases = writeAliases;
function createJsConfig(config) {
    let root = process.cwd();
    let jsconfigPath = path_1.default.join(root, 'jsconfig.json');
    if (fs_1.default.existsSync(jsconfigPath)) {
        return;
    }
    const DEFAULT = {
        exclude: ['node_modules'],
    };
    if (!config.root) {
        fs_1.default.writeFileSync(jsconfigPath, JSON.stringify(DEFAULT, null, 2));
        return;
    }
    root = path_1.default.join(process.cwd(), config.root);
    jsconfigPath = path_1.default.join(root, 'jsconfig.json');
    if (fs_1.default.existsSync(jsconfigPath)) {
        return;
    }
    fs_1.default.writeFileSync(jsconfigPath, JSON.stringify(DEFAULT, null, 2));
}
exports.createJsConfig = createJsConfig;
function getAppAliases(appConfig) {
    const aliases = {
        '@': '',
    };
    const apps = appConfig.INSTALLED_APPS;
    for (const app in apps) {
        const trail = appConfig.STATIC_LOOKUP ? '/' + app : '';
        aliases[`@s:${app}`] = (0, vite_1.normalizePath)(`${apps[app]}/static${trail}`);
        aliases[`@t:${app}`] = (0, vite_1.normalizePath)(`${apps[app]}/templates${trail}`);
    }
    return aliases;
}
exports.getAppAliases = getAppAliases;
function resolveDevServerUrl(address, config, _userConfig) {
    var _a;
    const configHmrProtocol = typeof config.server.hmr === 'object'
        ? config.server.hmr.protocol
        : null;
    const clientProtocol = configHmrProtocol
        ? configHmrProtocol === 'wss'
            ? 'https'
            : 'http'
        : null;
    const serverProtocol = config.server.https ? 'https' : 'http';
    const protocol = clientProtocol !== null && clientProtocol !== void 0 ? clientProtocol : serverProtocol;
    const configHmrHost = typeof config.server.hmr === 'object' ? config.server.hmr.host : null;
    const configHost = typeof config.server.host === 'string' ? config.server.host : null;
    const serverAddress = isIpv6(address)
        ? `[${address.address}]`
        : address.address;
    const host = (_a = configHmrHost !== null && configHmrHost !== void 0 ? configHmrHost : configHost) !== null && _a !== void 0 ? _a : serverAddress;
    const configHmrClientPort = typeof config.server.hmr === 'object'
        ? config.server.hmr.clientPort
        : null;
    const port = configHmrClientPort !== null && configHmrClientPort !== void 0 ? configHmrClientPort : address.port;
    return `${protocol}://${host}:${port}`;
}
exports.resolveDevServerUrl = resolveDevServerUrl;
function isIpv6(address) {
    return (address.family === 'IPv6' ||
        // In node >=18.0 <18.4 this was an integer value. This was changed in a minor version.
        // See: https://github.com/laravel/vite-plugin/issues/103
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore-next-line
        address.family === 6);
}

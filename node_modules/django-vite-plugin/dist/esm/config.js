import fs from 'fs';
import { glob } from 'glob';
import { addStaticToInputs, createJsConfig } from './helpers.js';
export async function resolvePluginConfig(config, appConfig) {
    if (!config) {
        throw new Error('django-vite-plugin: no configuration is provided!');
    }
    if (typeof config.input === 'undefined') {
        throw new Error('django-vite-plugin: no input is provided!');
    }
    const promises = [
        resolveFullReloadConfig(config, appConfig.INSTALLED_APPS),
    ];
    if (appConfig.STATIC_LOOKUP) {
        promises.push(addStaticToInputs(config.input, config));
    }
    const res = await Promise.all(promises);
    if (appConfig.STATIC_LOOKUP) {
        config.input = res[1];
    }
    //@ts-expect-error no way to convert decleared types
    config.appConfig = appConfig;
    if (config.addAliases === true) {
        createJsConfig(config);
    }
    config.addAliases = config.addAliases !== false;
    return config;
}
export function resolveBuildConfig(config, front) {
    return {
        ...(front || {}),
        manifest: front?.manifest ?? true,
        outDir: front?.outDir ?? config.appConfig.BUILD_DIR,
        assetsInlineLimit: front?.assetsInlineLimit ?? 0,
        rollupOptions: {
            ...(front?.rollupOptions || {}),
            input: config.input,
        },
    };
}
async function resolveFullReloadConfig(config, apps) {
    if (typeof config.reloader === 'undefined') {
        config.reloader = true;
    }
    else if (!config.reloader) {
        config.watch = [];
        return;
    }
    if (typeof config.delay !== 'number') {
        config.delay = 3000;
    }
    if (Array.isArray(config.watch)) {
        return;
    }
    const root = config.root || '.';
    const watch = [];
    for (const app in apps) {
        if (fs.existsSync(root + '/' + app)) {
            watch.push(`${root}/${app}/**/*.py`);
        }
    }
    config.watch = glob.globSync(watch);
}
